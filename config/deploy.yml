# サービス名。コンテナ名のプレフィクスとして使用される。
service: onigiri_recipe

# Dockerイメージ名。コンテナレジストリにpushする名前。
image: onigiri_recipe

# デプロイ先のサーバーのIPアドレスまたはホスト名。
# web:とすることでロールを分けることができる
servers:
  web:
    - 54.65.68.57

# kamal-proxyの設定。
proxy:
  # Let's EncryptによるSSL/TLSサーバー証明書の自動取得を有効にする
  ssl: true
  # ホスト名でWebアプリのコンテナにルーティングする。ssl: trueの時は必須。
  host: myapp.host
  # Webアプリコンテナの待ち受けポート番号。Railsなら3000番。
  app_port: 3000

# Dockerコンテナレジストリの認証情報(AWS ECR使用)
# Actions側でECRログインを完了するため、passwordは不要だがusernameは必須
registry:
  server: 733853434519.dkr.ecr.ap-northeast-1.amazonaws.com/onigiri-recipe
  username: AWS
  password:
    - KAMAL_REGISTRY_PASSWORD

# 環境変数
env:
  secret:
    - RAILS_MASTER_KEY

# エイリアス
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"


# デプロイ直後の404エラーを防ぐ
asset_path: /rails/public/assets

# docker build についての設定
builder:
  # CPUアーキテクチャ。amd64かarm64のいずれかまたはどちらか。
  # ローカルマシンと異なるアーキテクチャも、リモートビルドの設定を追加することで可能。
  arch: amd64
  context: .
  dockerfile: Dockerfile

# リモートサーバーのSSH情報。
ssh:
  user: ec2-user
